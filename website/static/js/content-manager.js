/**
 * GGenius Content Management System
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
 * @version 1.0.0
 */

class ContentManager {
    constructor() {
        this.content = new Map();
        this.currentLanguage = 'uk';
        this.fallbackLanguage = 'en';
        this.isLoaded = false;
        this.loadingPromise = null;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    async init() {
        if (this.loadingPromise) {
            return this.loadingPromise;
        }

        this.loadingPromise = this.loadContent();
        return this.loadingPromise;
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ JSON —Ñ–∞–π–ª—ñ–≤
     */
    async loadContent() {
        try {
            console.log('üîÑ Loading content...');
            
            const [ukContent, enContent] = await Promise.all([
                this.fetchContentFile('uk'),
                this.fetchContentFile('en')
            ]);

            this.content.set('uk', ukContent);
            this.content.set('en', enContent);
            
            this.isLoaded = true;
            console.log('‚úÖ Content loaded successfully');
            
            // –í—ñ–¥—Ä–∞–∑—É –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
            this.applyContentToPage();
            
            return true;
        } catch (error) {
            console.error('‚ùå Failed to load content:', error);
            this.fallbackToStaticContent();
            return false;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    async fetchContentFile(language) {
        const response = await fetch(`/static/data/content-${language}.json`);
        
        if (!response.ok) {
            throw new Error(`Failed to fetch ${language} content: ${response.status}`);
        }

        const text = await response.text();
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON
        try {
            return JSON.parse(text);
        } catch (parseError) {
            console.error(`Invalid JSON in ${language} content:`, parseError);
            throw parseError;
        }
    }

    /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
     */
    applyContentToPage() {
        if (!this.isLoaded) {
            console.warn('Content not loaded yet');
            return;
        }

        const currentContent = this.getCurrentContent();
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∞—Ç—Ä–∏–±—É—Ç–æ–º data-content
        document.querySelectorAll('[data-content]').forEach(element => {
            const contentKey = element.getAttribute('data-content');
            const content = this.getContentByKey(contentKey, currentContent);
            
            if (content) {
                this.setElementContent(element, content);
            } else {
                console.warn(`Content not found for key: ${contentKey}`);
            }
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ—Ç–∞-–¥–∞–Ω—ñ
        this.updateMetaData(currentContent);
        
        // –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–¥—ñ—ó –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
        document.dispatchEvent(new CustomEvent('content:loaded', {
            detail: { language: this.currentLanguage }
        }));
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    setElementContent(element, content) {
        const contentType = element.getAttribute('data-content-type') || 'text';
        
        switch (contentType) {
            case 'html':
                element.innerHTML = content;
                break;
            case 'text':
                element.textContent = content;
                break;
            case 'placeholder':
                element.placeholder = content;
                break;
            case 'title':
                element.title = content;
                break;
            case 'aria-label':
                element.setAttribute('aria-label', content);
                break;
            default:
                element.textContent = content;
        }

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –ø–æ—è–≤–∏
        element.classList.add('content-loaded');
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ –∫–ª—é—á–µ–º
     */
    getContentByKey(key, content) {
        const keys = key.split('.');
        let current = content;
        
        for (const k of keys) {
            if (current && typeof current === 'object' && k in current) {
                current = current[k];
            } else {
                return null;
            }
        }
        
        return current;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    getCurrentContent() {
        return this.content.get(this.currentLanguage) || 
               this.content.get(this.fallbackLanguage) || {};
    }

    /**
     * –ó–º—ñ–Ω–∞ –º–æ–≤–∏
     */
    async setLanguage(language) {
        if (this.currentLanguage === language) {
            return;
        }

        this.currentLanguage = language;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—ñ—Ä –º–æ–≤–∏
        localStorage.setItem('ggenius-language', language);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∞—Ç—Ä–∏–±—É—Ç lang —É HTML
        document.documentElement.lang = language;
        
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–Ω—Ç —É–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, –∑–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –π–æ–≥–æ
        if (this.isLoaded) {
            this.applyContentToPage();
        }
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç–∞-–¥–∞–Ω–∏—Ö
     */
    updateMetaData(content) {
        if (content.meta) {
            // –û–Ω–æ–≤–ª—é—î–º–æ title
            if (content.meta.title) {
                document.title = content.meta.title;
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ meta description
            const metaDescription = document.querySelector('meta[name="description"]');
            if (metaDescription && content.meta.description) {
                metaDescription.content = content.meta.description;
            }
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–µ–∂–∏–º –∑ —Å—Ç–∞—Ç–∏—á–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
     */
    fallbackToStaticContent() {
        console.log('üîÑ Using fallback static content');
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ –∫–ª–∞—Å–æ–º fallback-text
        document.querySelectorAll('.fallback-text').forEach(element => {
            element.style.display = 'block';
        });
        
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ data-content, —è–∫—ñ –Ω–µ –º–∞—é—Ç—å fallback
        document.querySelectorAll('[data-content]:not(.fallback-text)').forEach(element => {
            if (!element.textContent.trim()) {
                element.style.display = 'none';
            }
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞ –∫–ª—é—á–µ–º
     */
    getText(key, variables = {}) {
        if (!this.isLoaded) {
            return key; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–ª—é—á —è–∫ fallback
        }

        const content = this.getCurrentContent();
        let text = this.getContentByKey(key, content);
        
        if (!text) {
            console.warn(`Text not found for key: ${key}`);
            return key;
        }

        // –ó–∞–º—ñ–Ω—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ –≤ —Ç–µ–∫—Å—Ç—ñ
        return this.interpolateVariables(text, variables);
    }

    /**
     * –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —É —Ç–µ–∫—Å—Ç—ñ
     */
    interpolateVariables(text, variables) {
        return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
            return variables[key] || match;
        });
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
     */
    isContentLoaded() {
        return this.isLoaded;
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –∫–ª–∞—Å
window.ContentManager = ContentManager;
