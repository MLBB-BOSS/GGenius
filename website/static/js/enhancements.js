/**
 * GGenius Enhanced Interactive Experience with Content Management
 * Performance-optimized ES2023+ JavaScript for cyberpunk AI platform
 * @version 2.3.0 // Enhanced with content management
 * @author GGenius Team
 */

class GGeniusApp {
    constructor() {
        this.isLoaded = false;
        this.observers = new Map();
        this.animations = new Map();
        this.eventListeners = new Map();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É
        this.contentManager = new ContentManager();

        this.settings = {
            soundsEnabled: JSON.parse(localStorage.getItem('ggenius-soundsEnabled')) ?? true,
            musicEnabled: JSON.parse(localStorage.getItem('ggenius-musicEnabled')) ?? false,
            soundVolume: parseFloat(localStorage.getItem('ggenius-soundVolume')) || 0.3,
            musicVolume: parseFloat(localStorage.getItem('ggenius-musicVolume')) || 0.1,
            language: localStorage.getItem('ggenius-language') || 'uk'
        };

        this.audioContext = null;
        this.audioNodes = new Map();
        this.soundEffects = new Map();
        this.ambientOscillators = null;
        this.ambientGain = null;
        this.masterGain = null;

        this.performance = {
            startTime: performance.now(),
            metrics: {},
            isLowPerformance: this.detectLowPerformance()
        };

        this.handleScroll = this.throttle(this._handleScroll.bind(this), 16);
        this.handleResize = this.debounce(this._handleResize.bind(this), 200);
        this.handleVisibilityChange = this._handleVisibilityChange.bind(this);

        this.currentModalFocusableElements = [];
        this.lastFocusedElementBeforeModal = null;

        this.init();
    }

    getVersion() {
        return "2.3.0";
    }

    async init() {
        try {
            console.log(`üöÄ GGenius AI Revolution initializing... v${this.getVersion()}`);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
            this.showContentLoadingIndicator();
            
            document.documentElement.classList.add('js-loaded');
            document.body.classList.add('content-loading');
            
            if (this.performance.isLowPerformance) {
                document.documentElement.classList.add('low-performance-device');
            }

            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É
            await this.contentManager.setLanguage(this.settings.language);
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
            await this.loadCriticalFeatures();
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
            const contentLoaded = await this.contentManager.init();
            
            if (contentLoaded) {
                document.body.classList.remove('content-loading');
                this.hideContentLoadingIndicator();
            } else {
                console.warn('Failed to load content, using fallback');
                this.handleContentLoadFailure();
            }
            
            this.setupGlobalEventListeners();
            await this.initializeAudioSystem();

            await Promise.all([
                this.setupPerformanceMonitoring(),
                this.initializeUI(),
                this.setupInteractions()
            ]);

            await this.setupAdvancedFeatures();
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ –º–æ–≤–∏
            this.setupLanguageSwitcher();

            this.isLoaded = true;
            this.trackLoadTime();
            console.log('‚úÖ GGenius fully initialized');
            document.dispatchEvent(new CustomEvent('ggenius:loaded'));
            this.playStartupSequence();
            
        } catch (error) {
            console.error('üî• GGenius initialization failed:', error);
            this.fallbackMode(error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    showContentLoadingIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'content-loading-indicator active';
        indicator.id = 'contentLoadingIndicator';
        document.body.appendChild(indicator);
    }

    /**
     * –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    hideContentLoadingIndicator() {
        const indicator = document.getElementById('contentLoadingIndicator');
        if (indicator) {
            indicator.classList.remove('active');
            setTimeout(() => indicator.remove(), 300);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    handleContentLoadFailure() {
        document.body.classList.remove('content-loading');
        this.hideContentLoadingIndicator();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        this.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–µ–∂–∏–º.', 'warning', 5000);
        
        // –ê–∫—Ç–∏–≤—É—î–º–æ fallback –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.fallback-text').forEach(element => {
            element.style.display = 'block';
        });
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –º–æ–≤–∏
     */
    setupLanguageSwitcher() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        this.createLanguageSwitcher();
        
        // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—ó –∑–º—ñ–Ω–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        document.addEventListener('content:loaded', (event) => {
            console.log(`Content loaded for language: ${event.detail.language}`);
            this.playSound('notification');
        });
    }

    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –º–æ–≤–∏
     */
    createLanguageSwitcher() {
        const existingSwitcher = document.getElementById('languageSwitcher');
        if (existingSwitcher) return;

        const switcher = document.createElement('div');
        switcher.id = 'languageSwitcher';
        switcher.className = 'language-switcher';
        
        const languages = [
            { code: 'uk', name: '–£–ö' },
            { code: 'en', name: 'EN' }
        ];

        languages.forEach(lang => {
            const button = document.createElement('button');
            button.textContent = lang.name;
            button.className = this.settings.language === lang.code ? 'active' : '';
            button.addEventListener('click', () => this.changeLanguage(lang.code));
            switcher.appendChild(button);
        });

        // –î–æ–¥–∞—î–º–æ –¥–æ header'–∞
        const header = document.querySelector('.site-header .header-container');
        if (header) {
            header.appendChild(switcher);
        }
    }

    /**
     * –ó–º—ñ–Ω–∞ –º–æ–≤–∏
     */
    async changeLanguage(languageCode) {
        if (this.settings.language === languageCode) return;

        this.showContentLoadingIndicator();
        
        try {
            await this.contentManager.setLanguage(languageCode);
            this.settings.language = languageCode;
            localStorage.setItem('ggenius-language', languageCode);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–º–∏–∫–∞—á–∞
            document.querySelectorAll('.language-switcher button').forEach(btn => {
                btn.classList.toggle('active', btn.textContent.toLowerCase() === languageCode);
            });
            
            this.hideContentLoadingIndicator();
            this.playSound('tab_switch');
            
        } catch (error) {
            console.error('Failed to change language:', error);
            this.hideContentLoadingIndicator();
            this.showToast('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –º–æ–≤–∏', 'error');
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞ –∫–ª—é—á–µ–º
     */
    getText(key, variables = {}) {
        return this.contentManager.getText(key, variables);
    }

    /**
     * –î–∏–Ω–∞–º—ñ—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –µ–ª–µ–º–µ–Ω—Ç–∞
     */
    updateElementText(element, contentKey, variables = {}) {
        if (!element) return;
        
        const text = this.getText(contentKey, variables);
        element.textContent = text;
        element.classList.add('content-loaded');
    }

    // –†–µ—à—Ç–∞ –º–µ—Ç–æ–¥—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
    // [–¢—É—Ç –≤–µ—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–¥ –∑ enhancements.js]

    /**
     * –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é i18n
     */
    showDemoModal() {
        const modalId = 'demo-modal-ggenius';
        if (document.getElementById(modalId)) return;

        const title = this.getText('demo.modal.title') || 'GGenius AI Demo';
        const content = `
            <p>${this.getText('demo.modal.welcome') || '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó GGenius AI!'}</p>
            <p>${this.getText('demo.modal.development') || '–ù–∞—Ä–∞–∑—ñ —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏!'}</p>
            <button type="button" onclick="app.scrollToNewsletter()">${this.getText('demo.modal.subscribe') || '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'}</button>
        `;
        
        const modal = this.createModal({
            id: modalId,
            title: title,
            content: content,
            actions: [{ 
                text: this.getText('common.close') || '–ó–∞–∫—Ä–∏—Ç–∏', 
                action: () => this.closeModal(modalId) 
            }]
        });
        
        this.showModal(modal);
    }

    /**
     * –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π fallback —Ä–µ–∂–∏–º
     */
    fallbackMode(error) {
        document.documentElement.classList.add('fallback-mode');
        document.body.classList.remove('content-loading');
        
        const message = document.createElement('div');
        message.className = 'error-message';
        message.innerHTML = `
            <div class="error-content">
                <h2>üîß –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó GGenius</h2>
                <p>–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: <code>${error.message}</code></p>
                <p>–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–±–æ –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.</p>
                <button onclick="location.reload()" class="retry-button">üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É</button>
            </div>
        `;
        
        document.body.prepend(message);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ fallback –∫–æ–Ω—Ç–µ–Ω—Ç
        document.querySelectorAll('.fallback-text').forEach(element => {
            element.style.display = 'block';
        });
    }

    // –Ü–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω...
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
    window.app = new GGeniusApp();
});

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GGeniusApp;
}