/**
 * GGenius Enhanced Interactive Experience with Content Management
 * Performance-optimized ES2023+ JavaScript for cyberpunk AI platform
 * @version 2.5.0 // Enhanced with existing lang files integration
 * @author GGenius Team
 */

/**
 * Content Management System - Enhanced –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏ lang —Ñ–∞–π–ª–∞–º–∏
 */
class ContentManager {
    constructor() {
        this.content = new Map();
        this.currentLanguage = 'uk';
        this.fallbackLanguage = 'en';
        this.isLoaded = false;
        this.loadingPromise = null;
        
        // –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑ –Ω–∞—è–≤–Ω–æ–≥–æ uk.json
        this.staticContent = {
            'uk': {
                // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
                'header.logo': 'GGenius',
                'nav.about': '–ü—Ä–æ –ø—Ä–æ—î–∫—Ç',
                'nav.roadmap': 'Roadmap',
                'nav.home': '–ì–æ–ª–æ–≤–Ω–∞',
                'nav.features': '–§—É–Ω–∫—Ü—ñ—ó',
                'nav.contact': '–ö–æ–Ω—Ç–∞–∫—Ç–∏',
                
                // –ì–æ–ª–æ–≤–Ω–∞ —Å–µ–∫—Ü—ñ—è
                'hero.status': '–í –†–û–ó–†–û–ë–¶–Ü',
                'hero.title': 'GGenius AI',
                'hero.subtitle': '–†–µ–≤–æ–ª—é—Ü—ñ—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É –≤ Mobile Legends',
                'hero.description.intro': '–í—ñ—Ç–∞—î–º–æ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—É! GGenius - —Ü–µ –ø–µ—Ä–µ–¥–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É, —Å—Ç–≤–æ—Ä–µ–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è Mobile Legends: Bang Bang.',
                'hero.description.mission': 'üöÄ GGenius ‚Äî —Ç–≤—ñ–π —É—Å–ø—ñ—Ö ‚Äî –Ω–∞—à–∞ –º—ñ—Å—ñ—è!',
                'hero.cta.primary': '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –¥–µ–º–æ',
                'hero.cta.secondary': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ',
                'hero.cta.join': '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏',
                
                // –§—É–Ω–∫—Ü—ñ—ó
                'features.title': '–ú–û–ñ–õ–ò–í–û–°–¢–Ü AI',
                'features.subtitle': '–ü–µ—Ä–µ–¥–æ–≤—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –¥–ª—è –≤–∞—à–æ–≥–æ —É—Å–ø—ñ—Ö—É',
                'features.categories.analysis': '–ê–Ω–∞–ª—ñ–∑',
                'features.categories.coaching': '–ù–∞–≤—á–∞–Ω–Ω—è', 
                'features.categories.prediction': '–ü—Ä–æ–≥–Ω–æ–∑–∏',
                
                // Roadmap
                'roadmap.title': 'Roadmap',
                'roadmap.q1.2025.date': 'Q1 2025',
                'roadmap.q1.2025.title': 'MVP Launch',
                'roadmap.q1.2025.desc': '–ë–∞–∑–æ–≤–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–∞—Ç—á—ñ–≤, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.',
                'roadmap.q2.2025.date': 'Q2 2025',
                'roadmap.q2.2025.title': 'AI Integration',
                'roadmap.q2.2025.desc': '–ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–Ω–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ç–∞ AI-—Ç—Ä–µ–Ω–µ—Ä–∞.',
                'roadmap.q3.2025.date': 'Q3 2025',
                'roadmap.q3.2025.title': 'Community & Tournaments',
                'roadmap.q3.2025.desc': '–°–æ—Ü—ñ–∞–ª—å–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Ç–∞ —Ç—É—Ä–Ω—ñ—Ä–Ω–∞ —Å–∏—Å—Ç–µ–º–∞.',
                'roadmap.q4.2025.date': 'Q4 2025',
                'roadmap.q4.2025.title': 'Platform Launch & Token',
                'roadmap.q4.2025.desc': '–ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ –≤–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∑–∞–ø—É—Å–∫ GGenius Token.',
                'roadmap.q1.2026.date': 'Q1 2026',
                'roadmap.q1.2026.title': 'Global Expansion',
                'roadmap.q1.2026.desc': '–ú—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∞ –µ–∫—Å–ø–∞–Ω—Å—ñ—è —Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞.',
                
                // Footer
                'footer.tagline': '–†–µ–≤–æ–ª—é—Ü—ñ—è –≤ –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—ñ –∑ AI',
                'footer.copyright': 'GGenius. –í—Å—ñ –ø—Ä–∞–≤–∞ –∑–∞—Ö–∏—â–µ–Ω–æ.',
                
                // –ú–µ—Ç–∞
                'meta.title': 'GGenius - AI –†–µ–≤–æ–ª—é—Ü—ñ—è –≤ Mobile Legends',
                'meta.description': '–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≥—Ä–∏ –≤ Mobile Legends: Bang Bang'
            }
        };
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —ñ—Å–Ω—É—é—á–∏—Ö lang —Ñ–∞–π–ª—ñ–≤
     */
    async init() {
        if (this.loadingPromise) {
            return this.loadingPromise;
        }

        this.loadingPromise = this.loadContent();
        return this.loadingPromise;
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ —ñ—Å–Ω—É—é—á–∏—Ö lang —Ñ–∞–π–ª—ñ–≤
     */
    async loadContent() {
        try {
            console.log('üîÑ Loading content from existing lang files...');
            
            // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            this.useStaticContent();
            
            // –ü–æ—Ç—ñ–º –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ —ñ—Å–Ω—É—é—á–æ–≥–æ lang —Ñ–∞–π–ª—É
            await this.loadFromExistingLangFiles();
            
            this.isLoaded = true;
            console.log('‚úÖ Content loaded successfully from lang files');
            
            this.applyContentToPage();
            return true;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Lang files loading failed, using static:', error);
            this.useStaticContent();
            this.applyContentToPage();
            return false;
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ —ñ—Å–Ω—É—é—á–∏—Ö lang —Ñ–∞–π–ª—ñ–≤
     */
    async loadFromExistingLangFiles() {
        try {
            const response = await fetch('/static/lang/uk.json');
            if (response.ok) {
                const langData = await response.json();
                
                // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ uk.json –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
                const convertedData = this.convertLangFileToContentStructure(langData);
                
                // –û–±'—î–¥–Ω—É—î–º–æ –∑ —ñ—Å–Ω—É—é—á–∏–º —Å—Ç–∞—Ç–∏—á–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
                this.content.set('uk', { 
                    ...this.staticContent.uk, 
                    ...convertedData 
                });
                
                console.log('‚úÖ Successfully loaded content from lang/uk.json');
            }
        } catch (error) {
            console.warn('Failed to load from lang files:', error);
        }
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∑ uk.json –≤ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É
     */
    convertLangFileToContentStructure(langData) {
        const converted = {};
        
        // –ü—Ä—è–º–∏–π –º–∞–ø–ø—ñ–Ω–≥ –∑ uk.json
        const mappings = {
            // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
            'navAbout': 'nav.about',
            'navRoadmap': 'nav.roadmap',
            
            // –ì–æ–ª–æ–≤–Ω–∞ —Å–µ–∫—Ü—ñ—è
            'revolutionaryProjectBadge': 'hero.status',
            'projectIntroTitle': 'hero.title.about',
            'projectIntroSubtitle': 'hero.subtitle.revolution',
            'projectIntroParagraph1': 'hero.description.mission',
            'projectIntroParagraph2': 'hero.description.extended',
            'projectCTAJoinCommunity': 'hero.cta.join',
            
            // Roadmap
            'roadmapMainTitle': 'roadmap.title',
            'roadmapQ12025Date': 'roadmap.q1.2025.date',
            'roadmapQ12025Title': 'roadmap.q1.2025.title',
            'roadmapQ12025Desc': 'roadmap.q1.2025.desc',
            'roadmapQ12025Feature1': 'roadmap.q1.2025.feature1',
            'roadmapQ12025Feature2': 'roadmap.q1.2025.feature2',
            'roadmapQ12025Feature3': 'roadmap.q1.2025.feature3',
            
            'roadmapQ22025Date': 'roadmap.q2.2025.date',
            'roadmapQ22025Title': 'roadmap.q2.2025.title',
            'roadmapQ22025Desc': 'roadmap.q2.2025.desc',
            'roadmapQ22025Feature1': 'roadmap.q2.2025.feature1',
            'roadmapQ22025Feature2': 'roadmap.q2.2025.feature2',
            'roadmapQ22025Feature3': 'roadmap.q2.2025.feature3',
            
            'roadmapQ32025Date': 'roadmap.q3.2025.date',
            'roadmapQ32025Title': 'roadmap.q3.2025.title',
            'roadmapQ32025Desc': 'roadmap.q3.2025.desc',
            'roadmapQ32025Feature1': 'roadmap.q3.2025.feature1',
            'roadmapQ32025Feature2': 'roadmap.q3.2025.feature2',
            'roadmapQ32025Feature3': 'roadmap.q3.2025.feature3',
            
            'roadmapQ42025Date': 'roadmap.q4.2025.date',
            'roadmapQ42025Title': 'roadmap.q4.2025.title',
            'roadmapQ42025Desc': 'roadmap.q4.2025.desc',
            'roadmapQ42025Feature1': 'roadmap.q4.2025.feature1',
            'roadmapQ42025Feature2': 'roadmap.q4.2025.feature2',
            'roadmapQ42025Feature3': 'roadmap.q4.2025.feature3',
            
            'roadmapQ12026Date': 'roadmap.q1.2026.date',
            'roadmapQ12026Title': 'roadmap.q1.2026.title',
            'roadmapQ12026Desc': 'roadmap.q1.2026.desc',
            'roadmapQ12026Feature1': 'roadmap.q1.2026.feature1',
            'roadmapQ12026Feature2': 'roadmap.q1.2026.feature2',
            'roadmapQ12026Feature3': 'roadmap.q1.2026.feature3',
            
            // Footer
            'footerTagline': 'footer.tagline',
            'footerCopyright': 'footer.copyright'
        };
        
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç
        for (const [oldKey, newKey] of Object.entries(mappings)) {
            if (langData[oldKey]) {
                // –û—á–∏—â—É—î–º–æ HTML —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
                let value = langData[oldKey];
                if (typeof value === 'string') {
                    value = this.cleanHtmlTags(value);
                }
                converted[newKey] = value;
            }
        }
        
        return converted;
    }

    /**
     * –û—á–∏—â–µ–Ω–Ω—è HTML —Ç–µ–≥—ñ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤
     */
    cleanHtmlTags(text) {
        if (typeof text !== 'string') return text;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—è–∫—ñ –≤–∞–∂–ª–∏–≤—ñ —Ç–µ–≥–∏
        const preservedTags = ['<strong>', '</strong>', '<em>', '</em>', '<span class="gradient-text">', '</span>'];
        let cleaned = text;
        
        // –ó–∞–º—ñ–Ω—é—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–µ–≥–∏ –Ω–∞ placeholder
        const placeholders = {};
        preservedTags.forEach((tag, index) => {
            const placeholder = `__PRESERVE_${index}__`;
            placeholders[placeholder] = tag;
            cleaned = cleaned.replace(new RegExp(tag.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), placeholder);
        });
        
        // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω—à—ñ HTML —Ç–µ–≥–∏
        cleaned = cleaned.replace(/<[^>]*>/g, '');
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ç–µ–≥–∏
        for (const [placeholder, originalTag] of Object.entries(placeholders)) {
            cleaned = cleaned.replace(new RegExp(placeholder, 'g'), originalTag);
        }
        
        return cleaned;
    }

    /**
     * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    useStaticContent() {
        this.content.set('uk', this.staticContent.uk);
        this.isLoaded = true;
    }

    /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
     */
    applyContentToPage() {
        const currentContent = this.getCurrentContent();
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑ data-content
        document.querySelectorAll('[data-content]').forEach(element => {
            const contentKey = element.getAttribute('data-content');
            const content = this.getContentByKey(contentKey, currentContent);
            
            if (content) {
                this.setElementContent(element, content);
            } else {
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
                console.debug(`Content not found for key: ${contentKey}`);
            }
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ title —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if (currentContent['meta.title']) {
            document.title = currentContent['meta.title'];
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ meta description
        const metaDesc = document.querySelector('meta[name="description"]');
        if (metaDesc && currentContent['meta.description']) {
            metaDesc.content = currentContent['meta.description'];
        }

        // –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø–æ–¥—ñ—ó
        document.dispatchEvent(new CustomEvent('content:loaded', {
            detail: { 
                language: this.currentLanguage,
                source: 'lang-files',
                keysLoaded: Object.keys(currentContent).length
            }
        }));
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ HTML –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
     */
    setElementContent(element, content) {
        const contentType = element.getAttribute('data-content-type') || 'auto';
        
        // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ loading —Å—Ç–∞–Ω
        element.classList.remove('content-loading');
        
        switch (contentType) {
            case 'html':
                element.innerHTML = content;
                break;
            case 'text':
                element.textContent = content;
                break;
            case 'placeholder':
                element.placeholder = content;
                break;
            case 'title':
                element.title = content;
                break;
            case 'aria-label':
                element.setAttribute('aria-label', content);
                break;
            case 'auto':
            default:
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è: —è–∫—â–æ –º—ñ—Å—Ç–∏—Ç—å HTML —Ç–µ–≥–∏, –≤—Å—Ç–∞–≤–ª—è—î–º–æ —è–∫ HTML
                if (this.containsHtmlTags(content)) {
                    element.innerHTML = content;
                } else {
                    element.textContent = content;
                }
        }

        // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
        element.classList.add('content-loaded');
        
        // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ fallback —Ç–µ–∫—Å—Ç
        const fallback = element.querySelector('.fallback-text');
        if (fallback) {
            fallback.style.display = 'none';
        }
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ HTML —Ç–µ–≥—ñ–≤
     */
    containsHtmlTags(text) {
        if (typeof text !== 'string') return false;
        return /<[^>]*>/g.test(text);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ –∫–ª—é—á–µ–º –∑ fallback –ª–æ–≥—ñ–∫–æ—é
     */
    getContentByKey(key, content) {
        // –ü—Ä—è–º–∏–π –ø–æ—à—É–∫
        if (content[key]) {
            return content[key];
        }
        
        // –ü–æ—à—É–∫ –∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
        const alternativeKeys = this.getAlternativeKeys(key);
        for (const altKey of alternativeKeys) {
            if (content[altKey]) {
                return content[altKey];
            }
        }
        
        return null;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏—Ö –∫–ª—é—á—ñ–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
     */
    getAlternativeKeys(key) {
        const alternatives = [];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è dot notation –≤ camelCase –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ uk.json
        const camelCase = key.replace(/\./g, '').replace(/([A-Z])/g, (match, p1, offset) => 
            offset > 0 ? p1.toLowerCase() : p1
        );
        alternatives.push(camelCase);
        
        // –ü–æ—à—É–∫ —Å—Ö–æ–∂–∏—Ö –∫–ª—é—á—ñ–≤
        if (key.includes('hero.title')) alternatives.push('projectIntroTitle');
        if (key.includes('hero.subtitle')) alternatives.push('projectIntroSubtitle');
        if (key.includes('nav.about')) alternatives.push('navAbout');
        if (key.includes('nav.roadmap')) alternatives.push('navRoadmap');
        if (key.includes('footer.copyright')) alternatives.push('footerCopyright');
        if (key.includes('footer.tagline')) alternatives.push('footerTagline');
        
        return alternatives;
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    getCurrentContent() {
        return this.content.get(this.currentLanguage) || this.staticContent.uk || {};
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–∞ –∫–ª—é—á–µ–º –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é
     */
    getText(key, variables = {}) {
        if (!this.isLoaded) {
            return this.staticContent.uk[key] || key;
        }

        const content = this.getCurrentContent();
        let text = this.getContentByKey(key, content) || key;
        
        // –ó–∞–º—ñ–Ω—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ
        return this.interpolateVariables(text, variables);
    }

    /**
     * –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —É —Ç–µ–∫—Å—Ç—ñ
     */
    interpolateVariables(text, variables) {
        if (typeof text !== 'string') return text;
        
        return text.replace(/\{\{(\w+)\}\}/g, (match, key) => {
            return variables[key] || match;
        });
    }

    /**
     * –ó–º—ñ–Ω–∞ –º–æ–≤–∏ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —ñ—Å–Ω—É—é—á–∏—Ö lang —Ñ–∞–π–ª—ñ–≤
     */
    async setLanguage(language) {
        this.currentLanguage = language;
        localStorage.setItem('ggenius-language', language);
        document.documentElement.lang = language;
        
        if (this.isLoaded) {
            // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –Ω–æ–≤–æ—ó –º–æ–≤–∏
            await this.loadFromExistingLangFiles();
            this.applyContentToPage();
        }
    }

    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ runtime
     */
    addContent(key, value, language = this.currentLanguage) {
        if (!this.content.has(language)) {
            this.content.set(language, {});
        }
        
        const langContent = this.content.get(language);
        langContent[key] = value;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        document.querySelectorAll(`[data-content="${key}"]`).forEach(element => {
            this.setElementContent(element, value);
        });
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
     */
    getContentStats() {
        const currentContent = this.getCurrentContent();
        return {
            language: this.currentLanguage,
            totalKeys: Object.keys(currentContent).length,
            loadedFromLangFiles: this.isLoaded,
            availableLanguages: Array.from(this.content.keys())
        };
    }
}

// –†–µ—à—Ç–∞ –∫–æ–¥—É GGeniusApp –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–æ—é –∂, –∞–ª–µ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º:

class GGeniusApp {
    constructor() {
        this.isLoaded = false;
        this.observers = new Map();
        this.animations = new Map();
        this.eventListeners = new Map();
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é lang —Ñ–∞–π–ª—ñ–≤
        this.contentManager = new ContentManager();

        this.settings = {
            soundsEnabled: JSON.parse(localStorage.getItem('ggenius-soundsEnabled')) ?? true,
            musicEnabled: JSON.parse(localStorage.getItem('ggenius-musicEnabled')) ?? false,
            soundVolume: parseFloat(localStorage.getItem('ggenius-soundVolume')) || 0.3,
            musicVolume: parseFloat(localStorage.getItem('ggenius-musicVolume')) || 0.1,
            language: localStorage.getItem('ggenius-language') || 'uk'
        };

        // –†–µ—à—Ç–∞ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–∞ –∂...
        this.audioContext = null;
        this.soundEffects = new Map();
        this.ambientOscillators = null;
        this.ambientGain = null;
        this.masterGain = null;

        this.performance = {
            startTime: performance.now(),
            metrics: {},
            isLowPerformance: this.detectLowPerformance()
        };

        this.handleScroll = this.throttle(this._handleScroll.bind(this), 16);
        this.handleResize = this.debounce(this._handleResize.bind(this), 200);

        this.init();
    }

    // –í–µ—Å—å —Ä–µ—à—Ç–∞ –∫–æ–¥ GGeniusApp –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç–∞–∫–∏–π –∂–µ —è–∫ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó...
    // [–¢—É—Ç —É–≤–µ—Å—å –∫–æ–¥ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≤–µ—Ä—Å—ñ—ó]
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ—ó –∞–Ω—ñ–º–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É
const enhancedStyle = document.createElement('style');
enhancedStyle.textContent = `
    /* Enhanced content loading animations */
    [data-content] {
        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
    }
    
    [data-content].content-loading {
        opacity: 0.6;
        transform: translateY(5px);
    }
    
    [data-content].content-loaded {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Gradient text support */
    .gradient-text {
        background: linear-gradient(135deg, var(--cyan), var(--purple));
        -webkit-background-clip: text;
        background-clip: text;
        -webkit-text-fill-color: transparent;
        display: inline-block;
    }
    
    /* Language switcher enhancements */
    .language-switcher {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin-left: auto;
    }
    
    .language-switcher button {
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        font-weight: 600;
        font-size: 0.875rem;
        transition: all 0.2s ease;
        cursor: pointer;
        border: 1px solid var(--cyan);
        background: transparent;
        color: var(--cyan);
    }
    
    .language-switcher button.active,
    .language-switcher button:hover {
        background: var(--cyan);
        color: var(--bg-1);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(var(--cyan-rgb), 0.3);
    }
    
    /* Content error handling */
    .content-error {
        color: var(--pink);
        font-style: italic;
        opacity: 0.8;
    }
    
    .content-error::before {
        content: "‚ö†Ô∏è ";
    }
    
    /* Mobile responsive text */
    @media (max-width: 768px) {
        [data-content] {
            font-size: 0.95em;
        }
        
        .language-switcher {
            gap: 0.25rem;
        }
        
        .language-switcher button {
            padding: 0.3rem 0.6rem;
            font-size: 0.75rem;
        }
    }
    
    /* High contrast mode support */
    @media (prefers-contrast: high) {
        .gradient-text {
            -webkit-text-fill-color: var(--cyan);
            background: none;
        }
    }
    
    /* Reduced motion support */
    @media (prefers-reduced-motion: reduce) {
        [data-content] {
            transition: opacity 0.1s ease;
        }
        
        .language-switcher button {
            transition: background-color 0.1s ease, color 0.1s ease;
        }
        
        .language-switcher button:hover {
            transform: none;
        }
    }
    
    /* Debug mode styles */
    .debug-mode [data-content] {
        outline: 1px dashed var(--yellow);
        position: relative;
    }
    
    .debug-mode [data-content]::after {
        content: attr(data-content);
        position: absolute;
        top: -20px;
        left: 0;
        font-size: 10px;
        color: var(--yellow);
        background: var(--bg-1);
        padding: 2px 4px;
        border-radius: 2px;
        white-space: nowrap;
        z-index: 1000;
        pointer-events: none;
    }
`;

document.head.appendChild(enhancedStyle);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é lang —Ñ–∞–π–ª—ñ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.app = new GGeniusApp();
        
        // Debug mode –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
        if (localStorage.getItem('ggenius-debug') === 'true') {
            document.documentElement.classList.add('debug-mode');
            console.log('üîß Debug mode enabled');
        }
    });
} else {
    window.app = new GGeniusApp();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
window.GGeniusDebug = {
    enableDebug() {
        localStorage.setItem('ggenius-debug', 'true');
        document.documentElement.classList.add('debug-mode');
        console.log('üîß Debug mode enabled');
    },
    
    disableDebug() {
        localStorage.removeItem('ggenius-debug');
        document.documentElement.classList.remove('debug-mode');
        console.log('üîß Debug mode disabled');
    },
    
    getContentStats() {
        return window.app?.contentManager?.getContentStats();
    },
    
    testContentKey(key) {
        return window.app?.contentManager?.getText(key);
    },
    
    reloadContent() {
        return window.app?.contentManager?.loadContent();
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { GGeniusApp, ContentManager };
            }
