"""
GGenius Website - Enhanced FastAPI Server
–†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—É MLBB

@version 2.0.0
@author MLBB-BOSS Team
@license MIT
"""

from fastapi import FastAPI, Request, HTTPException, status
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse, JSONResponse
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from pydantic import BaseModel, EmailStr, validator
import uvicorn
import os
import logging
from pathlib import Path
from typing import Optional, Dict, Any
import asyncio
import aiofiles
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Pydantic –º–æ–¥–µ–ª—ñ –¥–ª—è —Ñ–æ—Ä–º
class ContactForm(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏"""
    email: EmailStr
    game_id: Optional[str] = None
    interest: str
    message: str
    newsletter: bool = True
    
    @validator('message')
    def validate_message(cls, v):
        if len(v.strip()) < 10:
            raise ValueError('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 10 —Å–∏–º–≤–æ–ª—ñ–≤')
        if len(v) > 1000:
            raise ValueError('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ (–º–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª—ñ–≤)')
        return v.strip()
    
    @validator('interest')
    def validate_interest(cls, v):
        allowed_interests = [
            'tournaments', 'ai_coaching', 'team_building', 
            'nft_rewards', 'content_creation', 'beta_testing'
        ]
        if v not in allowed_interests:
            raise ValueError('–ù–µ–≤—ñ–¥–æ–º–∞ –æ–±–ª–∞—Å—Ç—å —ñ–Ω—Ç–µ—Ä–µ—Å—ñ–≤')
        return v

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è FastAPI –¥–æ–¥–∞—Ç–∫—É
app = FastAPI(
    title="GGenius - –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è MLBB",
    description="–î–µ —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –∑ –≥–µ–Ω—ñ–∞–ª—å–Ω—ñ—Å—Ç—é –≥—Ä–∞–≤—Ü—ñ–≤",
    version="2.0.0",
    docs_url="/admin/docs",  # –ü—Ä–∏—Ö–æ–≤–∞–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è
    redoc_url="/admin/redoc",
    openapi_url="/admin/openapi.json"
)

# Middleware –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
app.add_middleware(
    GZipMiddleware,
    minimum_size=1000
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –£ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –æ–±–º–µ–∂–∏—Ç–∏ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤
BASE_DIR = Path(__file__).parent
STATIC_DIR = BASE_DIR / "static"
TEMPLATES_DIR = BASE_DIR / "templates"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
if not STATIC_DIR.exists():
    logger.error(f"–°—Ç–∞—Ç–∏—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {STATIC_DIR}")
    raise RuntimeError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {STATIC_DIR} –Ω–µ —ñ—Å–Ω—É—î")

if not TEMPLATES_DIR.exists():
    logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞: {TEMPLATES_DIR}")
    TEMPLATES_DIR = STATIC_DIR  # Fallback –¥–æ static

# –ú–æ–Ω—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
try:
    app.mount("/static", StaticFiles(directory=str(STATIC_DIR)), name="static")
    logger.info(f"–°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω—ñ –∑ {STATIC_DIR}")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤: {e}")
    raise

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Jinja2
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤
template_globals = {
    "site_name": "GGenius",
    "site_version": "2.0.0",
    "current_year": datetime.now().year,
    "meta_description": "–†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç—É Mobile Legends: Bang Bang",
    "meta_keywords": "Mobile Legends, MLBB, –∫—ñ–±–µ—Ä—Å–ø–æ—Ä—Ç, AI, —à—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç, —Ç—É—Ä–Ω—ñ—Ä–∏, –≥–µ–π–º—ñ–Ω–≥",
    "social_links": {
        "discord": "https://discord.gg/ggenius",
        "telegram": "https://t.me/ggenius_official",
        "instagram": "https://instagram.com/ggenius.pro",
        "youtube": "https://youtube.com/@ggenius",
        "twitter": "https://twitter.com/ggenius_pro",
        "facebook": "https://facebook.com/ggenius.pro"
    }
}

@app.on_event("startup")
async def startup_event():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ GGenius Website...")
    logger.info(f"üìÅ –°—Ç–∞—Ç–∏—á–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {STATIC_DIR}")
    logger.info(f"üìÑ –î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è —à–∞–±–ª–æ–Ω—ñ–≤: {TEMPLATES_DIR}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
    critical_files = [
        STATIC_DIR / "css" / "style.css",
        STATIC_DIR / "js" / "enhancements.js"
    ]
    
    for file_path in critical_files:
        if not file_path.exists():
            logger.warning(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
        else:
            logger.info(f"‚úÖ –§–∞–π–ª –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")

@app.get("/", response_class=HTMLResponse, include_in_schema=False)
async def get_index(request: Request):
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Å–∞–π—Ç—É"""
    try:
        # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —à–∞–±–ª–æ–Ω, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        template_path = TEMPLATES_DIR / "index.html"
        if template_path.exists():
            return templates.TemplateResponse(
                "index.html", 
                {
                    "request": request,
                    **template_globals
                }
            )
        
        # Fallback –¥–æ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        static_index = STATIC_DIR / "index.html"
        if static_index.exists():
            return FileResponse(
                static_index, 
                media_type="text/html",
                headers={
                    "Cache-Control": "public, max-age=3600",
                    "X-Content-Type-Options": "nosniff"
                }
            )
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ HTML
        emergency_html = await generate_emergency_html()
        return HTMLResponse(
            content=emergency_html,
            status_code=200,
            headers={"Content-Type": "text/html; charset=utf-8"}
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@app.post("/contact", response_class=JSONResponse)
async def submit_contact_form(form_data: ContactForm):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ—ó —Ñ–æ—Ä–º–∏"""
    try:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        logger.info(f"üìù –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞: {form_data.email}, —ñ–Ω—Ç–µ—Ä–µ—Å: {form_data.interest}")
        
        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É email
        # –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥—É—î–º–æ
        
        # –°–∏–º—É–ª—è—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏
        await asyncio.sleep(0.1)
        
        return JSONResponse(
            content={
                "success": True,
                "message": "–î—è–∫—É—î–º–æ –∑–∞ —ñ–Ω—Ç–µ—Ä–µ—Å –¥–æ GGenius! –ú–∏ –∑–≤'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.",
                "next_step": "–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ email –∑ –¥–µ—Ç–∞–ª—è–º–∏ –ø—Ä–æ —Ä–∞–Ω–Ω—ñ–π –¥–æ—Å—Ç—É–ø"
            },
            status_code=200
        )
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ä–º–∏: {e}")
        return JSONResponse(
            content={
                "success": False,
                "message": "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
                "error": str(e) if os.getenv("DEBUG") else None
            },
            status_code=400
        )

@app.get("/health", include_in_schema=False)
async def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "healthy",
        "version": "2.0.0",
        "timestamp": datetime.now().isoformat(),
        "static_files": STATIC_DIR.exists(),
        "templates": TEMPLATES_DIR.exists()
    }

@app.get("/api/stats", response_class=JSONResponse)
async def get_stats():
    """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏"""
    # –ü–æ–∫–∏ —â–æ —Å—Ç–∞—Ç–∏—á–Ω—ñ –¥–∞–Ω—ñ, –ø—ñ–∑–Ω—ñ—à–µ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    return {
        "registered_users": 1250,
        "tournaments_held": 47,
        "total_matches": 15420,
        "prize_pool": "$125,000",
        "ai_analyses": 89340,
        "last_updated": datetime.now().isoformat()
    }

async def generate_emergency_html() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–≤–∞—Ä—ñ–π–Ω–æ–≥–æ HTML, —è–∫—â–æ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ"""
    return """
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GGenius - –†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è MLBB</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #0a0c10 0%, #1a1d23 100%);
            color: #E8E6E3;
            line-height: 1.6;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 2rem;
        }
        .logo {
            font-size: 4rem;
            font-weight: 900;
            background: linear-gradient(135deg, #9C27B0, #FF2E97);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin-bottom: 1rem;
        }
        .subtitle {
            font-size: 1.5rem;
            margin-bottom: 2rem;
            opacity: 0.9;
        }
        .status {
            background: rgba(255, 255, 255, 0.1);
            padding: 1.5rem;
            border-radius: 1rem;
            border: 1px solid rgba(255, 255, 255, 0.2);
            max-width: 600px;
        }
        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #FF2E97;
            animation: spin 1s ease-in-out infinite;
            margin-right: 0.5rem;
        }
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="logo">GGenius</div>
    <div class="subtitle">–†–µ–≤–æ–ª—é—Ü—ñ–π–Ω–∞ AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è Mobile Legends: Bang Bang</div>
    <div class="status">
        <div class="loading"></div>
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏...
        <br><br>
        –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ —Å–∏—Å—Ç–µ–º–∏ —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É
    </div>
    <script>
        setTimeout(() => {
            window.location.reload();
        }, 3000);
    </script>
</body>
</html>
    """

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8000))
    debug_mode = os.environ.get("DEBUG", "false").lower() == "true"
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"üêõ –†–µ–∂–∏–º –≤—ñ–¥–ª–∞–¥–∫–∏: {debug_mode}")
    
    uvicorn.run(
        app, 
        host="0.0.0.0", 
        port=port,
        reload=debug_mode,
        access_log=debug_mode
)
