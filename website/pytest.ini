[tool:pytest]
# Pytest configuration for GGenius Website - Production Grade
minversion = 7.4
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Essential addopts for comprehensive testing
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing:skip-covered
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --asyncio-mode=auto
    --durations=10
    --maxfail=5

# Test discovery paths
testpaths = tests

# Custom markers for organized testing
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    fast: marks tests as fast (select with '-m fast')
    integration: marks tests as integration tests
    unit: marks tests as unit tests  
    api: marks tests as API endpoint tests
    auth: marks tests as authentication tests
    tournament: marks tests as tournament functionality
    user: marks tests as user management functionality
    database: marks tests requiring database access
    redis: marks tests requiring Redis cache
    email: marks tests for email functionality
    ai: marks tests for AI service integration
    performance: marks tests for performance benchmarking
    security: marks tests for security features
    smoke: marks tests for smoke testing (critical functionality)
    regression: marks tests for regression testing
    mock: marks tests using mocked dependencies
    real: marks tests using real external services

# Async configuration
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Warning filters
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::ImportWarning
    # Ignore specific warnings from dependencies
    ignore:.*unclosed.*:ResourceWarning
    ignore:.*coroutine.*was never awaited:RuntimeWarning

# Coverage configuration
[coverage:run]
source = .
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */venv/*
    */env/*
    */.pytest_cache/*
    */migrations/*
    */alembic/*
    setup.py
    conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

# HTML coverage report configuration  
[coverage:html]
directory = htmlcov
show_contexts = true

# XML coverage report configuration
[coverage:xml]
output = coverage.xml
